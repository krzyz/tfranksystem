service: tfranksystem-api

provider:
  name: aws
  runtime: python3.8
  region: eu-central-1
  stage: ${opt:stage, 'dev'}
  environment:
      STAGE: ${self:provider.stage}
      REGION: ${self:provider.region}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "*"

functions:
  authenticate:
    handler: api/auth.authenticate
    environment:
        SECRET: ${file(config.${self:provider.stage}.yml):SECRET}
    events:
      - http:
          path: oauth/token
          method: post
          cors: true
  authorize:
    handler: api/auth.authorize
    environment:
        SECRET: ${file(config.${self:provider.stage}.yml):SECRET}
  get-all-players:
    handler: api/players.getall
    events:
      - http:
          path: players/
          method: get
          cors: true
  get-player:
    handler: api/players.getone
    events:
      - http:
          path: players/{id}
          method: get
          cors: true
  create-player:
    handler: api/players.create
    events:
      - http:
          path: players/
          method: post
          cors: true
          authorizer: 
            name: authorize
            resultTtlInSeconds: 0
  get-historical-ranks:
    handler: api/historicalranks.get
    events:
      - http:
          path: players/{id}/historical
          method: get 
          cors: true
  create-match:
    handler: api/matches.create
    events:
      - http:
          path: matches
          method: post
          cors: true
          authorizer: 
            name: authorize
            resultTtlInSeconds: 0
  remove-match:
    handler: api/matches.remove_handler
    events:
      - http:
          path: matches/{match_id}
          method: delete
          cors: true
          authorizer: 
            name: authorize
            resultTtlInSeconds: 0
          request:
            parameters:
              paths:
                match_id: true
  get-matches:
    handler: api/matches.getall
    events:
      - http:
          path: matches
          method: get
          cors: true

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: non-linux

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
